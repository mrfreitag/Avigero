<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugzilla.mozilla.org/bugzilla.dtd">

<bugzilla version="3.6.4+"
          urlbase="https://bugzilla.mozilla.org/"
          
          maintainer="bugzilla-admin@mozilla.org"
>

    <bug>
          <bug_id>647831</bug_id>
          
          <creation_ts>2011-04-05 09:15:00 -0700</creation_ts>
          <short_desc>TypeError thrown in [[DefaultValue]] if &quot;valueOf&quot; property is neither callable nor primitive</short_desc>
          <delta_ts>2011-04-05 11:14:41 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>3</classification_id>
          <classification>Components</classification>
          <product>Core</product>
          <component>JavaScript Engine</component>
          <version>unspecified</version>
          <rep_platform>x86_64</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>DUPLICATE</resolution>
          <dup_id>645468</dup_id>
          
          
          
          
          <priority>--</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          <blocked>445494</blocked>
          
          <everconfirmed>1</everconfirmed>
          <reporter name="A. Bargull">andrebargull</reporter>
          <assigned_to>general</assigned_to>
          <cc>bzbarsky</cc>
    
    <cc>evilpies</cc>
    
    <cc>jwalden+bmo</cc>
    
    <cc>VYV03354</cc>
          <qa_contact>general</qa_contact>
          <cf_blocking_fennec>---</cf_blocking_fennec>
          <cf_blocking_fx>---</cf_blocking_fx>
          <cf_blocking_20>---</cf_blocking_20>
          <cf_status_20>---</cf_status_20>
          <cf_blocking_192>---</cf_blocking_192>
          <cf_status_192>---</cf_status_192>
          <cf_blocking_191>---</cf_blocking_191>
          <cf_status_191>---</cf_status_191>
          
          
          
          
          
          
          
          
          
          

      

      

      

          <long_desc isprivate="0">
            <commentid>5391214</commentid>
            <who name="A. Bargull">andrebargull</who>
            <bug_when>2011-04-05 09:15:59 -0700</bug_when>
            <thetext>User-Agent:       Mozilla/5.0 (Windows NT 6.1; WOW64; rv:2.0) Gecko/20100101 Firefox/4.0
Build Identifier: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:2.0) Gecko/20100101 Firefox/4.0

[[DefaultValue]] with hint &quot;Number&quot; first tries to get the &quot;valueOf&quot; property and tests whether the property is callable through IsCallable(). If the &quot;valueOf&quot; property is not callable, the algorithm falls back to use &quot;toString&quot;. (And tests callable for &quot;ToString&quot; etc.). See 8.12.8 [[DefaultValue]]
The fallback part doesn&apos;t seem to work if the &quot;valueOf&quot; property is not a primitive value and also not callable (e.g. an Object or an Array). In that case a TypeError is thrown, although the &quot;toString&quot; property should be used instead.

Reproducible: Always

Steps to Reproduce:
Execute the following expressions
1) &quot;&quot; + {valueOf: void 0, toString: function (){ return &quot;toString&quot; }}
2) &quot;&quot; + {valueOf: null, toString: function (){ return &quot;toString&quot; }}
3) &quot;&quot; + {valueOf: 0, toString: function (){ return &quot;toString&quot; }}
4) &quot;&quot; + {valueOf: false, toString: function (){ return &quot;toString&quot; }}
5) &quot;&quot; + {valueOf: &quot;&quot;, toString: function (){ return &quot;toString&quot; }}
6) &quot;&quot; + {valueOf: {}, toString: function (){ return &quot;toString&quot; }}
7) &quot;&quot; + {valueOf: [], toString: function (){ return &quot;toString&quot; }}
8) &quot;&quot; + {valueOf: /(?:)/, toString: function (){ return &quot;toString&quot; }}
9) &quot;&quot; + {valueOf: /(?:foo)/, toString: function (){ return &quot;toString&quot; }}
10) &quot;&quot; + {valueOf: new Date(), toString: function (){ return &quot;toString&quot; }}
Actual Results:  
1) &quot;toString&quot;
2) &quot;toString&quot;
3) &quot;toString&quot;
4) &quot;toString&quot;
5) &quot;toString&quot;
6) TypeError thrown
7) TypeError thrown
8) &quot;toString&quot;
9) &quot;null&quot;
10) TypeError thrown

Note for 9: any &apos;complex&apos; RegExp seems to produce &quot;null&quot;, &apos;complex&apos; = anything else than the empty RegExp /(?:)/

Expected Results:  
1) &quot;toString&quot;
2) &quot;toString&quot;
3) &quot;toString&quot;
4) &quot;toString&quot;
5) &quot;toString&quot;
6) &quot;toString&quot;
7) &quot;toString&quot;
8) &quot;toString&quot;
9) &quot;toString&quot;
10) &quot;toString&quot;

Works as expected in IE9 and Safari 5.0.4
Similar problems are present in Opera 11.01</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>5391215</commentid>
            <who name="A. Bargull">andrebargull</who>
            <bug_when>2011-04-05 09:21:53 -0700</bug_when>
            <thetext>This is a ES5 compatibility issue, Firefox 4 still seems to follow the
[[DefaultValue]] algorithm specified in ES3</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>5391362</commentid>
            <who name="Tom Schuster (evilpie)">evilpies</who>
            <bug_when>2011-04-05 11:14:41 -0700</bug_when>
            <thetext>js_TryMethod really is the wrong answer.

*** This bug has been marked as a duplicate of bug 645468 ***</thetext>
          </long_desc>
      
      

    </bug>

</bugzilla>